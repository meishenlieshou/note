import{_ as s,c as a,b as i,a as o,e as n,d as r,w as l,r as d,o as p}from"./app-aZlDc-T-.js";const c={};function h(g,e){const t=d("RouteLink");return p(),a("div",null,[e[5]||(e[5]=i("h2",{id:"optimization-of-reactive-system",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#optimization-of-reactive-system"},[i("span",null,"Optimization of Reactive System")])],-1)),i("ol",null,[e[3]||(e[3]=i("li",null,[i("strong",null,[i("code",null,"Avoid Unnecessary Reactive Data")])],-1)),i("li",null,[e[1]||(e[1]=i("strong",null,[i("code",null,"Use computed and Avoid Unnecessary watch")],-1)),e[2]||(e[2]=n(": Try to avoid unnecessary operations in watch, and avoid triggering watch execution immediately during initialization. ")),r(t,{to:"/learn/vue/27zpUq4W6kPrGTR5dz/#watch&watchEffect"},{default:l(()=>e[0]||(e[0]=[n("watchEffect will execute immediately")])),_:1,__:[0]})]),e[4]||(e[4]=i("li",null,[i("strong",null,[i("code",null,"Selective Access to Reactive Objects")]),n(": When you need to get specific properties from a reactive object, try to manually destructure the properties instead of passing the entire object. This can avoid unnecessary dependency tracking.")],-1))]),e[6]||(e[6]=o(`<h2 id="component-rendering-optimization" tabindex="-1"><a class="header-anchor" href="#component-rendering-optimization"><span>Component Rendering Optimization</span></a></h2><ol><li><strong><code>Avoid Unnecessary Rendering</code></strong><ul><li>Use v-show instead of v-if</li><li>Use key to optimize v-for rendering</li></ul></li><li><strong><code>Avoid Frequent Re-rendering of Components</code></strong><ul><li>v-memo: Use v-memo to cache the rendering result of components or elements, avoiding re-rendering when dependencies do not change.</li><li>Manually control re-rendering: Control whether the component needs to be updated through watch, computed, or the lazy feature of ref, avoiding redundant re-rendering.</li><li>v-once: If a part of the view only needs to be rendered once, or some data does not change frequently, you can use v-once to render that part of the view, avoiding re-rendering during each update.</li></ul></li><li><strong><code>Split Large Components</code></strong> For larger components, load them on demand to avoid loading too much content during initial rendering.</li><li><strong><code>&lt;KeepAlive&gt; and Dynamic Components</code></strong> Use <code>&lt;keep-alive&gt;</code> to cache component states on dynamically loaded pages or components, avoiding repeated rendering. This is especially useful for caching the state of some pages when switching routes.</li></ol><h2 id="asynchronous-loading-and-code-splitting" tabindex="-1"><a class="header-anchor" href="#asynchronous-loading-and-code-splitting"><span>Asynchronous Loading and Code Splitting</span></a></h2><ol><li><strong><code>Lazy Loading Routes</code></strong><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> routes</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/about</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    component</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./views/About.vue</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  },</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong><code>Lazy Loading Components</code></strong><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> AsyncComponent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> defineAsyncComponent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./components/AsyncComponent.vue</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>For infrequently used components, delay loading them through defineAsyncComponent, loading the components only when needed.</li></ol><h2 id="state-management-optimization" tabindex="-1"><a class="header-anchor" href="#state-management-optimization"><span>State Management Optimization</span></a></h2><ol><li><strong><code>Local State Management</code></strong> Use modular state management to divide the application&#39;s state into multiple small stores, rather than putting all the state in one large global store. This helps improve performance and maintainability.</li><li><strong><code>Avoid Multiple Mutation Submissions</code></strong> In Vuex or Pinia, avoid multiple state updates during rendering. Try to merge multiple state modification operations into one batch submission to reduce the number of renderings.</li></ol><h2 id="event-and-method-optimization" tabindex="-1"><a class="header-anchor" href="#event-and-method-optimization"><span>Event and Method Optimization</span></a></h2><ol><li><strong><code>Event Delegation</code></strong>: Minimize binding events on each child element by binding events to the parent element through event delegation, reducing the number of event listeners.</li><li><strong><code>Use debounce or throttle to Optimize Frequently Triggered Events</code></strong></li></ol><h2 id="image-and-resource-optimization" tabindex="-1"><a class="header-anchor" href="#image-and-resource-optimization"><span>Image and Resource Optimization</span></a></h2><ol><li><strong><code>Lazy Loading Images</code></strong></li><li><strong><code>Use WebP Format</code></strong></li></ol><h2 id="caching-and-server-side-rendering-ssr" tabindex="-1"><a class="header-anchor" href="#caching-and-server-side-rendering-ssr"><span>Caching and Server-Side Rendering (SSR)</span></a></h2><ol><li><strong><code>Caching Strategy</code></strong> For content that does not change frequently, use client-side caching or server-side caching techniques to reduce repeated requests and improve response speed.</li><li><strong><code>Server-Side Rendering (SSR) and Static Site Generation (SSG)</code></strong></li></ol>`,12))])}const u=s(c,[["render",h]]),k=JSON.parse('{"path":"/learn/vue/rm7vPeEB19sNf4Y/","title":"","lang":"en-US","frontmatter":{"itle":"Vue Performance Optimization","createTime":"2025/01/18 07:12:08","permalink":"/learn/vue/rm7vPeEB19sNf4Y/","author":"Jack","tags":["Vue3","Performance Optimization"],"description":"description","head":[["meta",{"property":"og:url","content":"https://duduainy.top/learn/vue/rm7vPeEB19sNf4Y/"}],["meta",{"property":"og:site_name","content":"Seasoned Jack"}],["meta",{"property":"og:description","content":"description"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-07-01T13:26:02.000Z"}],["meta",{"property":"article:author","content":"Jack"}],["meta",{"property":"article:tag","content":"Vue3"}],["meta",{"property":"article:tag","content":"Performance Optimization"}],["meta",{"property":"article:modified_time","content":"2025-07-01T13:26:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-01T13:26:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jack\\"}]}"]]},"headers":[],"readingTime":{"minutes":1.56,"words":468},"git":{"updatedTime":1751376362000},"filePathRelative":"notes/learn/vue/8.vue性能优化.md","bulletin":false}');export{u as comp,k as data};
