import{_ as h,c as p,a as l,b as a,e as i,d as e,w as t,r,o as k}from"./app-aZlDc-T-.js";const d={};function o(g,s){const n=r("RouteLink");return k(),p("div",null,[s[22]||(s[22]=l(`<p>To improve code quality and reliability involves React-specific best practices, tools, and architectural principles. Below are key strategies tailored for React development:</p><h2 id="code-structure-and-best-practices" tabindex="-1"><a class="header-anchor" href="#code-structure-and-best-practices"><span>Code Structure and Best Practices</span></a></h2><h3 id="component-design-and-organization" tabindex="-1"><a class="header-anchor" href="#component-design-and-organization"><span>Component Design and Organization</span></a></h3><ul><li>Follow the Single Responsibility Principle (SRP): Each component should do one thing well.</li><li>Use functional components with hooks instead of class components (unless absolutely necessary).</li><li>Organize your sources like the follow</li></ul><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">src/</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">├──</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> components/</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   # Reusable UI components</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">├──</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> hooks/</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        # Custom React hooks</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">├──</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pages/</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        # Page-level components</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">├──</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> context/</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      # Context providers</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">├──</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> services/</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     # API calls and business logic</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">├──</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> utils/</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        # Helper functions</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">├──</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> styles/</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">       # Global and module styles</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><p>Both hooks and services can encapsulate business logic. the diffs are:</p><ul><li>Services encapsulate business logic that is independent of React. They are purely functional and reusable in any environment—whether in React components, backend scripts, or Node.js CLI tools.</li><li>Hooks encapsulate React-specific business logic that needs to manage state, effects, or interact with React’s lifecycle. Hooks make business logic reusable within React components.</li></ul></div><ul><li>Keep files small and manageable (~200 lines per file).</li><li>Use index files (index.ts) for better imports (import Button from &#39;../components/Button&#39; instead of import Button from &#39;../components/Button/Button&#39;).</li></ul><h3 id="consistent-state-management" tabindex="-1"><a class="header-anchor" href="#consistent-state-management"><span>Consistent State Management</span></a></h3>`,8)),a("ul",null,[s[6]||(s[6]=a("li",null,"Use React Context for simple global state (avoid prop drilling).",-1)),a("li",null,[s[1]||(s[1]=i("For complex state management, prefer Redux Toolkit or ")),e(n,{to:"/learn/react/g82ggf3US3YTid/"},{default:t(()=>s[0]||(s[0]=[i("Zustand")])),_:1,__:[0]}),s[2]||(s[2]=i(" over traditional Redux."))]),a("li",null,[s[4]||(s[4]=i("Consider ")),e(n,{to:"/learn/react/zp3FpVXCi7BK7id/"},{default:t(()=>s[3]||(s[3]=[i("React Query or SWR")])),_:1,__:[3]}),s[5]||(s[5]=i(" for data fetching instead of manual useEffect-based API calls."))])]),s[23]||(s[23]=l(`<h3 id="avoid-unnecessary-re-renders" tabindex="-1"><a class="header-anchor" href="#avoid-unnecessary-re-renders"><span>Avoid Unnecessary Re-renders</span></a></h3><ul><li>Use React.memo() for pure components.</li><li>Use useCallback() and useMemo() to prevent unnecessary recalculations.</li><li>Leverage React DevTools Profiler to identify performance bottlenecks.</li></ul><div class="hint-container note"><p class="hint-container-title">Note</p><p>How to Enabling the Profiler</p><ol><li><strong>Install React DevTools</strong>: If you haven&#39;t already, install the React DevTools browser extension for Chrome or Firefox. It comes built into React Developer Tools for standalone apps.</li><li><strong>React Version</strong>: Ensure you&#39;re using React 16.5+ for the Profiler to be available.</li><li><strong>Profiler Tab</strong>: Open the browser&#39;s Developer Tools and navigate to the Profiler tab (next to Components).</li></ol></div><h2 id="type-safety-with-typescript" tabindex="-1"><a class="header-anchor" href="#type-safety-with-typescript"><span>Type Safety with TypeScript</span></a></h2><h3 id="define-strict-types-for-props-state-and-function-parameters" tabindex="-1"><a class="header-anchor" href="#define-strict-types-for-props-state-and-function-parameters"><span>Define strict types for props, state, and function parameters.</span></a></h3><h3 id="use-react-fc-or-prop-props-to-define-functional-components" tabindex="-1"><a class="header-anchor" href="#use-react-fc-or-prop-props-to-define-functional-components"><span>Use React.FC (or ({ prop }: Props) =&gt; {}) to define functional components.</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">type</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> ButtonProps</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  label</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">string</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  onClick</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: () =&gt; </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">void</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Button</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">React</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">FC</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">ButtonProps</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt; =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ({</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> label</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> onClick</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> })</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> onClick</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">={</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">onClick</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}&gt;{</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">label</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="use-discriminated-unions-for-better-prop-management-instead-of-boolean-flags" tabindex="-1"><a class="header-anchor" href="#use-discriminated-unions-for-better-prop-management-instead-of-boolean-flags"><span>Use Discriminated Unions for better prop management instead of boolean flags.</span></a></h3><p>Discriminated Unions (also known as tagged unions or sum types) are a feature in some programming languages (like TypeScript, Haskell, and Rust) that allow you to define a type that can hold one of several distinct variants. Each variant is &quot;tagged&quot; with a unique identifier (a discriminator), which makes it easy to distinguish between the different cases at runtime.</p><p>Here’s a simple example of a discriminated union in TypeScript</p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">type</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Shape</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  |</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> kind</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">circle</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> radius</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">number</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // Variant 1: Circle</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  |</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> kind</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">square</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> sideLength</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">number</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // Variant 2: Square</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  |</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> kind</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">rectangle</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> width</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">number</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> height</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">number</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> };</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // Variant 3: Rectangle</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getArea</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">shape</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Shape</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> number</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  switch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">shape</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">kind</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    case</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">circle</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">      return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Math</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">PI</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> shape</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">radius</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> **</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // Access \`radius\` safely</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    case</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">square</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">      return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> shape</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">sideLength</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> **</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // Access \`sideLength\` safely</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    case</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">rectangle</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">      return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> shape</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">width</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> shape</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">height</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // Access \`width\` and \`height\` safely</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    default</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      // Ensures exhaustiveness: if a new variant is added, TypeScript will throw an error here.</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">      const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> _exhaustiveCheck</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">never</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> shape</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">      throw</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Error</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Unknown shape: </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">\${</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">_exhaustiveCheck</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// Usage</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> circle</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Shape</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> kind</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">circle</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> radius</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> };</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getArea</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">circle</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 78.53981633974483</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="testing-for-reliability" tabindex="-1"><a class="header-anchor" href="#testing-for-reliability"><span>Testing for Reliability</span></a></h2><h3 id="unit-and-integration-testing" tabindex="-1"><a class="header-anchor" href="#unit-and-integration-testing"><span>Unit and Integration Testing</span></a></h3>`,13)),a("ul",null,[a("li",null,[a("strong",null,[s[9]||(s[9]=i("Use ")),e(n,{to:"/learn/front/UvYWaKydhX/"},{default:t(()=>s[7]||(s[7]=[i("Jest")])),_:1,__:[7]}),s[10]||(s[10]=i(" or ")),e(n,{to:"/learn/opensource/Vitest/"},{default:t(()=>s[8]||(s[8]=[i("Vitest")])),_:1,__:[8]}),s[11]||(s[11]=i(" and React Testing Library to test components"))])])]),s[24]||(s[24]=l(`<div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//React Testing Library</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> render</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> screen</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">@testing-library/react</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Button</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./Button</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">renders button with label</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  render</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(&lt;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">Button</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> label</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Click me</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> onClick</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">={()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {}}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> /&gt;);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  expect</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">screen</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getByText</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Click me</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">toBeInTheDocument</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Please follow these best practices to ensure efficient and maintainable testing when you use Jest in your projects:</p><ol><li>Store test files alongside components using ComponentName.test.js or inside a <strong>tests</strong> folder.</li><li>Each test should validate a single behavior or function.</li><li>Avoid dependencies between tests to prevent flaky test results.</li><li>Test component behavior rather than internal state.</li><li>Focus on user interactions and UI updates.</li></ol><ul><li><strong>Use MSW (Mock Service Worker) for API mocking</strong></li></ul><h3 id="end-to-end-testing" tabindex="-1"><a class="header-anchor" href="#end-to-end-testing"><span>End-to-End Testing</span></a></h3>`,5)),a("ul",null,[a("li",null,[s[13]||(s[13]=i("Use ")),e(n,{to:"/learn/opensource/1ws3o8/"},{default:t(()=>s[12]||(s[12]=[i("Cypress")])),_:1,__:[12]}),s[14]||(s[14]=i(" or Playwright for UI testing to simulate real user interactions."))]),a("li",null,[s[16]||(s[16]=i("Automate tests in ")),e(n,{to:"/learn/build/q2uqL1id/"},{default:t(()=>s[15]||(s[15]=[i("CI/CD")])),_:1,__:[15]}),s[17]||(s[17]=i(" pipelines to ensure no breaking changes."))])]),s[25]||(s[25]=a("h2",{id:"maintainability-and-readability",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#maintainability-and-readability"},[a("span",null,"Maintainability and Readability")])],-1)),s[26]||(s[26]=a("h3",{id:"follow-eslint-and-prettier-with-custom-rules-for-react",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#follow-eslint-and-prettier-with-custom-rules-for-react"},[a("span",null,"Follow ESLint and Prettier with custom rules for React.")])],-1)),s[27]||(s[27]=a("p",null,[a("strong",null,"ESLint"),i(" is a widely-used, open-source tool for identifying and fixing problems in JavaScript code. It enforces coding standards, detects potential issues, and improves code quality by analyzing your code for errors, style violations, and anti-patterns. It is highly configurable and supports both JavaScript and TypeScript.")],-1)),a("p",null,[s[19]||(s[19]=i("More details click ")),e(n,{to:"/learn/build/3wiFPAUPIcGkCIMZDypr/"},{default:t(()=>s[18]||(s[18]=[i("here")])),_:1,__:[18]})]),s[28]||(s[28]=l(`<p><strong>Prettier</strong> is an open-source code formatter that enforces a consistent style across your codebase. Unlike linters (like ESLint), which check for code quality and logical errors, Prettier focuses entirely on the formatting of your code—things like indentation, line breaks, quotes, and spacing.</p><h3 id="use-jsdoc-or-inline-comments-for-complex-logic" tabindex="-1"><a class="header-anchor" href="#use-jsdoc-or-inline-comments-for-complex-logic"><span>Use JSDoc or inline comments for complex logic</span></a></h3><div class="language-ts line-numbers-mode" data-ext="ts" data-title="ts"><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * Fetches user data from the API.</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">param</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> userId</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> - The ID of the user.</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">returns</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> User data object.</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> */</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">async</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getUser</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">userId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">string</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="use-storybook-for-documenting-ui-components-interactively" tabindex="-1"><a class="header-anchor" href="#use-storybook-for-documenting-ui-components-interactively"><span>Use Storybook for documenting UI components interactively.</span></a></h3><p>Storybook is an open-source tool for developing, testing, and documenting UI components in isolation. It provides an interactive environment where you can build and preview components independently of your app, making it easier to test and showcase their behavior, states, and edge cases.</p>`,5)),a("p",null,[s[21]||(s[21]=i("For more informations, click ")),e(n,{to:"/learn/opensource/aVA5MU/"},{default:t(()=>s[20]||(s[20]=[i("here")])),_:1,__:[20]})]),s[29]||(s[29]=l('<h2 id="security-best-practices" tabindex="-1"><a class="header-anchor" href="#security-best-practices"><span>Security Best Practices</span></a></h2><ul><li>Sanitize user input using libraries like DOMPurify to prevent XSS attacks.</li><li>Use React Error Boundaries to prevent UI crashes</li><li>Secure API requests using HTTPS, JWT authentication, and CSRF protection.</li></ul><h2 id="code-reviews-and-collaboration" tabindex="-1"><a class="header-anchor" href="#code-reviews-and-collaboration"><span>Code Reviews and Collaboration</span></a></h2><ul><li><p>Enforce pull request reviews with a checklist:</p><ul><li>✅ Code follows ESLint rules</li><li>✅ No unnecessary re-renders</li><li>✅ Proper TypeScript types used</li><li>✅ Has tests for new functionality</li></ul></li><li><p>Use <strong>pair programming</strong> for complex features.</p></li><li><p>Encourage team discussions on architecture and best practices.</p></li></ul><div class="hint-container note"><p class="hint-container-title">Note</p><p>Pair programming is a software development practice where two programmers work together at one workstation to complete a task. One person, the driver, writes the code, while the other, the navigator (or observer), reviews each line of code as it is typed. The two programmers switch roles frequently to ensure both are actively engaged and contributing.</p></div>',5))])}const y=h(d,[["render",o]]),u=JSON.parse('{"path":"/learn/react/FCMRm4mxFNadhZD9CM/","title":"Improving code quality and reliability","lang":"en-US","frontmatter":{"title":"Improving code quality and reliability","createTime":"2025/02/13 09:41:09","permalink":"/learn/react/FCMRm4mxFNadhZD9CM/","author":"Jack","tags":["React","Code quality","Reliability"],"description":"description","head":[["meta",{"property":"og:url","content":"https://duduainy.top/learn/react/FCMRm4mxFNadhZD9CM/"}],["meta",{"property":"og:site_name","content":"Seasoned Jack"}],["meta",{"property":"og:title","content":"Improving code quality and reliability"}],["meta",{"property":"og:description","content":"description"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-07-01T13:26:02.000Z"}],["meta",{"property":"article:author","content":"Jack"}],["meta",{"property":"article:tag","content":"React"}],["meta",{"property":"article:tag","content":"Code quality"}],["meta",{"property":"article:tag","content":"Reliability"}],["meta",{"property":"article:modified_time","content":"2025-07-01T13:26:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Improving code quality and reliability\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-01T13:26:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jack\\"}]}"]]},"headers":[],"readingTime":{"minutes":3.54,"words":1061},"git":{"updatedTime":1751376362000},"filePathRelative":"notes/learn/react/6.Improving code quality and reliability.md","bulletin":false}');export{y as comp,u as data};
