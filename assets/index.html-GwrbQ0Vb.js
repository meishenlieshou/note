import{_ as i,c as s,a,o as n}from"./app-D1DkgROt.js";const t={};function o(l,e){return n(),s("div",null,e[0]||(e[0]=[a(`<p>A standard Go project follows a modular, maintainable, and clear structure, ideal for small to medium applications or microservices. Below is a brief overview and related knowledge</p><h2 id="_1-project-structure" tabindex="-1"><a class="header-anchor" href="#_1-project-structure"><span>1. Project Structure</span></a></h2><p>While Go doesn’t enforce a strict structure, the community recommends the following layout, leveraging Go Modules:</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>text</span></span>
<span class="line"><span>myproject/</span></span>
<span class="line"><span>├── go.mod                # Module definition with dependencies</span></span>
<span class="line"><span>├── go.sum                # Dependency checksums</span></span>
<span class="line"><span>├── main.go               # Program entry point</span></span>
<span class="line"><span>├── cmd/                  # Executable commands or entry points</span></span>
<span class="line"><span>│   └── api/              # Example: API service entry</span></span>
<span class="line"><span>│       └── main.go</span></span>
<span class="line"><span>├── internal/             # Private packages, restricted from external access</span></span>
<span class="line"><span>│   ├── config/           # Configuration loading logic</span></span>
<span class="line"><span>│   ├── models/           # Data models (e.g., structs)</span></span>
<span class="line"><span>│   └── services/         # Business logic</span></span>
<span class="line"><span>├── pkg/                  # Reusable public packages</span></span>
<span class="line"><span>│   └── util/             # Utility functions</span></span>
<span class="line"><span>├── api/                  # API-related (e.g., OpenAPI specs, routes)</span></span>
<span class="line"><span>├── scripts/              # Build/deployment scripts</span></span>
<span class="line"><span>├── test/                 # Test-related files</span></span>
<span class="line"><span>├── Dockerfile            # Docker configuration (optional)</span></span>
<span class="line"><span>└── README.md             # Project documentation</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="key-files-and-directories" tabindex="-1"><a class="header-anchor" href="#key-files-and-directories"><span>Key Files and Directories</span></a></h2><ol><li><p><code>go.mod</code> - This file defines the module path and its dependencies. It is used by Go tools to resolve dependencies and verify the consistency of the module.</p></li><li><p><code>go.sum</code> - This file contains the checksums of the module dependencies. It is used by Go tools to verify the integrity of the downloaded dependencies.</p></li><li><p><code>main.go</code> - This file contains the entry point of the program. It is the main file that is executed when the program is run.</p></li><li><p><code>cmd/</code> - This directory contains the executable commands or entry points of the program. Each command is defined in its own subdirectory, with its own <code>main.go</code> file.</p></li><li><p><code>internal/</code> - This directory contains private packages, which are not intended to be used outside the project. It is a good practice to keep the internal packages isolated from external access, to avoid potential conflicts or security issues.</p></li><li><p><code>pkg/</code> - This directory contains reusable public packages. It is a good practice to keep the public packages small and focused, with a clear purpose and well-defined interface.</p></li><li><p><code>api/</code> - This directory contains API-related files, such as OpenAPI specifications and routes.</p></li><li><p><code>scripts/</code> - This directory contains build/deployment scripts, such as Dockerfiles and Makefiles.</p></li><li><p><code>test/</code> - This directory contains test-related files, such as test cases and test fixtures.</p></li><li><p><code>Dockerfile</code> - This file contains the configuration for building a Docker image of the program. It is optional, but it is recommended to use it to simplify the deployment process.</p></li><li><p><code>README.md</code> - This file contains the project documentation, including a brief description of the project and instructions for running and testing the program.</p></li></ol><h2 id="_2-modules" tabindex="-1"><a class="header-anchor" href="#_2-modules"><span>2. Modules</span></a></h2><p>Go modules are the primary mechanism for managing dependencies in Go. A module is a collection of Go packages that are versioned together and share a common module path. Each module has its own <code>go.mod</code> file, which defines the module path and its dependencies. The <code>go.sum</code> file contains the checksums of the module dependencies.</p><p>To create a new module, run the following command in the project directory:</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">go</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mod</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> init</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">module</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pat</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">h</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>For example, to create a module for a project named <code>myproject</code>, run:</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">go</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mod</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> init</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> github.com/myuser/myproject</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_3-dependency-management" tabindex="-1"><a class="header-anchor" href="#_3-dependency-management"><span>3. Dependency Management</span></a></h2><p>Go modules are designed to manage dependencies in a consistent and reproducible way. The <code>go.mod</code> file defines the module path and its dependencies, and the <code>go.sum</code> file contains the checksums of the module dependencies.</p><p>To add a new dependency to the project, run the following command:</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">go</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> get</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">package</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pat</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">h</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>For example, to add the <code>github.com/pkg/errors</code> package, run:</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">go</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> get</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> github.com/pkg/errors</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>To update all dependencies to their latest versions, run:</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">go</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> get</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -u</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_4-go-modules-and-semantic-versioning" tabindex="-1"><a class="header-anchor" href="#_4-go-modules-and-semantic-versioning"><span>4. Go Modules and Semantic Versioning</span></a></h2><p>Go modules use semantic versioning, which means that each version of a package is assigned a unique identifier in the format <code>vX.Y.Z</code>, where <code>X</code> is the major version, <code>Y</code> is the minor version, and <code>Z</code> is the patch version.</p><ol><li>Major version changes: These changes are not backwards-compatible and may include breaking changes to the API.</li><li>Minor version changes: These changes are backwards-compatible and may include new features or bug fixes.</li><li>Patch version changes: These changes are backwards-compatible and include only bug fixes.</li></ol><h2 id="_5-go-modules-and-go-versioning" tabindex="-1"><a class="header-anchor" href="#_5-go-modules-and-go-versioning"><span>5. Go Modules and Go Versioning</span></a></h2><p>Go modules are designed to work with the latest Go version. When a new Go version is released, the Go team updates the <code>go.mod</code> file to use the new version. This ensures that the module works with the latest Go version, without requiring any changes to the module.</p><h2 id="_6-go-modules" tabindex="-1"><a class="header-anchor" href="#_6-go-modules"><span>6. Go Modules</span></a></h2><ul><li>Introduced in Go 1.11, replacing $GOPATH.</li><li>Initialize: go mod init github.com/username/myproject.</li><li>Add dependency: go get github.com/gorilla/mux.</li><li>Clean dependencies: go mod tidy.</li></ul><h2 id="_7-code-organization" tabindex="-1"><a class="header-anchor" href="#_7-code-organization"><span>7. Code Organization</span></a></h2><ul><li>Single Responsibility: Each package focuses on one function.</li><li>Naming: Use lowercase, concise package names; files reflect functionality (e.g., server.go).</li><li>Error Handling: Explicitly check errors (e.g., if err != nil).</li></ul><h2 id="_8-tools" tabindex="-1"><a class="header-anchor" href="#_8-tools"><span>8. Tools</span></a></h2><ul><li>Testing: Run unit tests with go test; test files end in _test.go.</li><li>Formatting: Use go fmt for consistent style.</li><li>Static Analysis: golangci-lint for code quality checks.</li><li>Dependency Injection: Use wire or manual injection.</li><li>Build: go build for compiling, supports cross-compilation.</li></ul><h2 id="_9-common-libraries" tabindex="-1"><a class="header-anchor" href="#_9-common-libraries"><span>9. Common Libraries</span></a></h2><ul><li>Web Frameworks: Gin, Echo, Beego, Gorilla, Martini, Revel.</li><li>Database Drivers: MySQL, PostgreSQL, MongoDB, Redis.</li><li>JSON Parsing: Use json.Unmarshal or json.NewDecoder.</li><li>Logging: Use zerolog or logrus.</li><li>Configuration: Use viper or cobra.</li><li>Testing: Use Ginkgo or GoConvey.</li></ul><h2 id="_10-best-practices" tabindex="-1"><a class="header-anchor" href="#_10-best-practices"><span>10. Best Practices</span></a></h2><ul><li>Error Wrapping: Use errors.Wrap or similar for context.</li><li>Modularity: Keep packages small and focused.</li><li>Testing: Aim for high test coverage.</li><li>Documentation: Use README.md and code comments for clarity.</li></ul>`,35)]))}const r=i(t,[["render",o]]),c=JSON.parse('{"path":"/learn/fullstack/v86xXSSXXX9/","title":"Standard Go Project Structure","lang":"en-US","frontmatter":{"title":"Standard Go Project Structure","createTime":"2025/02/12 15:12:52","permalink":"/learn/fullstack/v86xXSSXXX9/","author":"Jack","tags":["Standard Go Project Structure","Go"],"description":"description","head":[["meta",{"property":"og:url","content":"https://duduainy.top/learn/fullstack/v86xXSSXXX9/"}],["meta",{"property":"og:site_name","content":"Seasoned Jack"}],["meta",{"property":"og:title","content":"Standard Go Project Structure"}],["meta",{"property":"og:description","content":"description"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-07-01T13:25:54.000Z"}],["meta",{"property":"article:author","content":"Jack"}],["meta",{"property":"article:tag","content":"Standard Go Project Structure"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:modified_time","content":"2025-07-01T13:25:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Standard Go Project Structure\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-01T13:25:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jack\\"}]}"]]},"headers":[],"readingTime":{"minutes":3,"words":899},"git":{"updatedTime":1751376354000},"filePathRelative":"notes/learn/fullstack/GoProjectStructure.md","bulletin":false}');export{r as comp,c as data};
