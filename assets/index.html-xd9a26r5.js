import{_ as n,c as t,a as o,o as a}from"./app-Bk-ls5rH.js";const i={};function s(r,e){return a(),t("div",null,e[0]||(e[0]=[o('<h2 id="common-ways-of-component-communication" tabindex="-1"><a class="header-anchor" href="#common-ways-of-component-communication"><span>Common Ways of Component Communication</span></a></h2><h3 id="parent-child-components-props-and-emit" tabindex="-1"><a class="header-anchor" href="#parent-child-components-props-and-emit"><span>Parent-Child Components: props and emit</span></a></h3><h3 id="sibling-components-event-bus" tabindex="-1"><a class="header-anchor" href="#sibling-components-event-bus"><span>Sibling Components: Event Bus</span></a></h3><p>Event bus, i.e., the concept of message subscription and publishing mode</p><h3 id="cross-level-components-provide-and-inject" tabindex="-1"><a class="header-anchor" href="#cross-level-components-provide-and-inject"><span>Cross-Level Components: provide and inject</span></a></h3><p>Refer to <a href="#provice-inject">example</a></p><h3 id="state-container" tabindex="-1"><a class="header-anchor" href="#state-container"><span>State Container</span></a></h3><h3 id="global-state-management-vuex-pinia" tabindex="-1"><a class="header-anchor" href="#global-state-management-vuex-pinia"><span>Global State Management: Vuex, Pinia</span></a></h3><p>For more introduction to Pinia, refer to <a href="#pinia-part">here</a></p><h2 id="lifecycle" tabindex="-1"><a class="header-anchor" href="#lifecycle"><span>Lifecycle Hooks of Options API</span></a></h2><p><strong>beforeCreate</strong> Before the instance is created, data and events have not been initialized yet, and data and props cannot be accessed at this stage.</p><p><strong>created</strong> The component instance has been created, and data and events have been set.</p><p><strong>beforeMount</strong> The component is about to be mounted to the DOM, but rendering has not been completed yet. At this time, the template has been parsed.</p><p><strong>mounted</strong> The component has been mounted, and the DOM has been generated. At this time, operations interacting with the DOM can be performed.</p><p><strong>beforeUpdate</strong> The component&#39;s data has changed, but the view has not been updated yet.</p><p><strong>updated</strong> The component&#39;s data has changed, and the view has been updated.</p><p><strong>activated</strong> The component is activated (e.g., components wrapped with keep-alive). This hook only applies to components cached by keep-alive.</p><p><strong>deactivated</strong> The component is deactivated (components cached in keep-alive will trigger this hook). Used to clean up cached components.</p><p><strong>beforeUnmount</strong> The component instance is about to be destroyed, but the DOM has not been removed yet.</p><p><strong>unmounted</strong> The component instance has been destroyed, and the DOM has been removed. Used to perform cleanup operations.</p><p><strong>errorCaptured</strong> Capture and handle errors from child components. This hook is triggered when an error occurs in a child component, allowing you to capture and handle the error to prevent it from propagating to the parent component.</p><h2 id="lifecycle-hooks-of-composition-api" tabindex="-1"><a class="header-anchor" href="#lifecycle-hooks-of-composition-api"><span>Lifecycle Hooks of Composition API</span></a></h2><ul><li>Use lifecycle hooks in the setup function, and these hooks are called with the on prefix. The hook functions are basically the same as those in the Options API.</li><li>The created and beforeCreate hooks no longer exist in the Composition API of Vue 3. The corresponding logic can be handled in the setup function.</li></ul>',23)]))}const c=n(i,[["render",s],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/learn/vue/BAkBN/","title":"Component Communication","lang":"en-US","frontmatter":{"title":"Component Communication","createTime":"2025/01/18 07:07:27","permalink":"/learn/vue/BAkBN/","author":"Jack","tags":["Vue3","Component Communication"],"description":"Common Ways of Component Communication Parent-Child Components: props and emit Sibling Components: Event Bus Event bus, i.e., the concept of message subscription and publishing ...","head":[["meta",{"property":"og:url","content":"https://duduainy.top/learn/vue/BAkBN/"}],["meta",{"property":"og:site_name","content":"Seasoned Jack"}],["meta",{"property":"og:title","content":"Component Communication"}],["meta",{"property":"og:description","content":"Common Ways of Component Communication Parent-Child Components: props and emit Sibling Components: Event Bus Event bus, i.e., the concept of message subscription and publishing ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-03-16T18:45:36.000Z"}],["meta",{"property":"article:author","content":"Jack"}],["meta",{"property":"article:tag","content":"Vue3"}],["meta",{"property":"article:tag","content":"Component Communication"}],["meta",{"property":"article:modified_time","content":"2025-03-16T18:45:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Component Communication\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-16T18:45:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jack\\"}]}"]]},"headers":[],"readingTime":{"minutes":1.22,"words":366},"git":{"updatedTime":1742150736000},"autoDesc":true,"filePathRelative":"notes/learn/vue/3.组件通信.md","bulletin":false}');export{c as comp,d as data};
