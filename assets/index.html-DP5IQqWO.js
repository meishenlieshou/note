import{_ as t,c as a,a as n,o as r}from"./app-DWPRV4SX.js";const o={};function s(i,e){return r(),a("div",null,e[0]||(e[0]=[n('<h2 id="layout-and-tempaltes" tabindex="-1"><a class="header-anchor" href="#layout-and-tempaltes"><span>Layout and Tempaltes</span></a></h2><h3 id="layout-tsx" tabindex="-1"><a class="header-anchor" href="#layout-tsx"><span>layout.tsx</span></a></h3><p>A layout is UI that is shared between multiple pages. On navigation, layouts preserve state, remain interactive, and do not rerender.</p><p>You can define a layout by default exporting a React component from a layout file. The component should accept a children prop which can be a page or another layout.</p><h2 id="link-and-navigate" tabindex="-1"><a class="header-anchor" href="#link-and-navigate"><span>Link and Navigate</span></a></h2><p>The App Router uses a hybrid approach for routing and navigation. On the server, your application code is automatically code-split by route segments. And on the client, Next.js prefetches and caches the route segments. This means, when a user navigates to a new route, the browser doesn&#39;t reload the page, and only the route segments that change re-render - improving the navigation experience and performance.</p><h3 id="link" tabindex="-1"><a class="header-anchor" href="#link"><span>Link</span></a></h3><p>You can use the <code>&lt;Link&gt;</code> component to navigate between routes. <code>&lt;Link&gt;</code> is a built-in Next.js component that extends the HTML <code>&lt;a&gt;</code> tag to provide prefetching and client-side navigation.</p><p>It is the primary and recommended way to navigate between routes in Next.js.</p><h3 id="userouter" tabindex="-1"><a class="header-anchor" href="#userouter"><span>useRouter()</span></a></h3><p>The useRouter hook allows you to programmatically change routes from Client Components.</p><p>Use the <code>&lt;Link&gt;</code> component to navigate between routes unless you have a specific requirement for using useRouter.</p><h3 id="redirect" tabindex="-1"><a class="header-anchor" href="#redirect"><span>redirect</span></a></h3><p>For Server Components, use the redirect function instead.</p><h3 id="using-the-native-history-api" tabindex="-1"><a class="header-anchor" href="#using-the-native-history-api"><span>Using the native History API</span></a></h3><p>Next.js allows you to use the native window.history.pushState and window.history.replaceState methods to update the browser&#39;s history stack without reloading the page.</p><ul><li>window.history.pushState</li></ul><p>Use it to add a new entry to the browser&#39;s history stack. The user can navigate back to the previous state.</p><ul><li>window.history.replaceState</li></ul><p>Use it to replace the current entry on the browser&#39;s history stack. The user is not able to navigate back to the previous state.</p><h2 id="error-handling" tabindex="-1"><a class="header-anchor" href="#error-handling"><span>Error Handling</span></a></h2><p>Errors can be divided into two categories: <strong>expected errors</strong> and <strong>uncaught exceptions</strong>.</p><ul><li><strong>Model expected errors as return values</strong>: Avoid using try/catch for expected errors in Server Actions. Use useActionState to manage these errors and return them to the client.</li><li><strong>Use error boundaries for unexpected errors</strong>: Implement error boundaries using error.tsx and global-error.tsx files to handle unexpected errors and provide a fallback UI.</li></ul><p>Uncaught exceptions are unexpected errors that indicate bugs or issues that should not occur during the normal flow of your application. These should be handled by throwing errors, which will then be caught by error boundaries.</p><ul><li><strong>Common</strong>: Handle uncaught errors below the root layout with error.js.</li><li><strong>Optional</strong>: Handle granular uncaught errors with nested error.js files (e.g. app/dashboard/error.js)</li><li><strong>Uncommon</strong>: Handle uncaught errors in the root layout with global-error.js.</li></ul><p>Create an error boundary by adding an error.tsx file inside a route segment and exporting a React component.</p><p>If you want errors to bubble up to the parent error boundary, you can throw when rendering the error component.</p><p>While less common, you can handle errors in the root layout using app/global-error.js, located in the root app directory, even when leveraging internationalization. Global error UI must define its own <code>&lt;html&gt;</code> and <code>&lt;body&gt;</code> tags, since it is replacing the root layout or template when active.</p><h2 id="loading-ui-and-streaming" tabindex="-1"><a class="header-anchor" href="#loading-ui-and-streaming"><span>Loading UI and Streaming</span></a></h2><h3 id="instant-loading-states" tabindex="-1"><a class="header-anchor" href="#instant-loading-states"><span>Instant Loading States</span></a></h3><p>The special file loading.js helps you create meaningful Loading UI with React Suspense. With this convention, you can show an instant loading state from the server while the content of a route segment loads. The new content is automatically swapped in once rendering is complete.</p><p>In the same folder, loading.js will be nested inside layout.js. It will automatically wrap the page.js file and any children below in a <code>&lt;Suspense&gt;</code> boundary.</p><h3 id="streaming-with-suspense" tabindex="-1"><a class="header-anchor" href="#streaming-with-suspense"><span>Streaming with Suspense</span></a></h3><p>In addition to loading.js, you can also manually create Suspense Boundaries for your own UI components.</p><p>Some browsers buffer a streaming response. You may not see the streamed response until the response exceeds 1024 bytes.</p><h3 id="what-is-streaming" tabindex="-1"><a class="header-anchor" href="#what-is-streaming"><span>What is Streaming?</span></a></h3><p>With SSR, there&#39;s a series of steps that need to be completed before a user can see and interact with a page:</p><ol><li>First, all data for a given page is fetched on the server.</li><li>The server then renders the HTML for the page.</li><li>The HTML, CSS, and JavaScript for the page are sent to the client.</li><li>A non-interactive user interface is shown using the generated HTML, and CSS.</li><li>Finally, React hydrates the user interface to make it interactive.</li></ol><p>These steps are sequential and blocking, meaning the server can only render the HTML for a page once all the data has been fetched. And, on the client, React can only hydrate the UI once the code for all components in the page has been downloaded.</p><p>Streaming allows you to break down the page&#39;s HTML into smaller chunks and progressively send those chunks from the server to the client.</p><p>Streaming works well with React&#39;s component model because each component can be considered a chunk. Components that have higher priority (e.g. product information) or that don&#39;t rely on data can be sent first (e.g. layout), and React can start hydration earlier. Components that have lower priority (e.g. reviews, related products) can be sent in the same server request after their data has been fetched.</p><h2 id="page-router-vs-app-router" tabindex="-1"><a class="header-anchor" href="#page-router-vs-app-router"><span>Page Router vs App Router</span></a></h2><p>In Next.js, the App Router and Pages Router are two different routing systems, each with its own approach to handling routes, data fetching, and rendering.</p><h3 id="pages-router-old-system-pages-directory" tabindex="-1"><a class="header-anchor" href="#pages-router-old-system-pages-directory"><span>Pages Router (Old System - pages/ Directory)</span></a></h3><p>The Pages Router is the traditional Next.js routing system, where each file inside the pages/ directory automatically becomes a route. Like the following</p><p><img src="https://a.okmd.dev/md/67d677947d303.png" alt="s11023203162025"></p><p><strong>Features of Pages Router</strong></p><ul><li>Uses pages/ directory for routing.</li><li>Supports <strong>getServerSideProps</strong>, <strong>getStaticProps</strong>, <strong>getInitialProps</strong> for data fetching.</li><li>Uses client-side rendering (CSR), server-side rendering (SSR), and static site generation (SSG).</li><li>Relies on next/link for navigation.</li><li>Each page is a React component that gets rendered on the client or server.</li><li>A file inside /pages becomes a route automatically (/index.tsx → /)</li></ul><div class="hint-container note"><p class="hint-container-title">Note</p><p>getStaticProps (SSG - Static Site Generation) getServerSideProps (SSR - Server-Side Rendering) getInitialProps (Deprecated in Pages Router, Still Used in _app.js)</p></div><p><strong>❌ Limitations</strong></p><ul><li>No built-in React Server Components.</li><li>Limited flexibility for rendering approaches.</li><li>Complex API for managing layouts and fetching data.</li></ul><h3 id="app-router-new-system-app-directory" tabindex="-1"><a class="header-anchor" href="#app-router-new-system-app-directory"><span>App Router (New System - app/ Directory)</span></a></h3><p>The App Router was introduced in Next.js 13 and is based on React Server Components (RSC). It uses the /app directory instead of /pages.</p><p><strong>Key Features</strong></p><ul><li>Uses app/ directory for routing.</li><li>Based on React Server Components (RSC).</li><li>Supports Layouts, Server Components, and Streaming.</li><li>Uses async/await for data fetching in components.</li><li>API routes are replaced by server actions.</li><li>Uses loading.tsx, error.tsx, and layout.tsx for better control over loading and errors.</li></ul><h3 id="which-one-to-use" tabindex="-1"><a class="header-anchor" href="#which-one-to-use"><span>Which One to Use?</span></a></h3><ul><li>Use Pages Router (/pages) if you need traditional getServerSideProps, getStaticProps, or prefer a simple structure.</li><li>Use App Router (/app) if you want React Server Components, improved performance, streaming, and layouts.</li></ul><p>The App Router (/app) is the future of Next.js.</p><p>Pages Router (/pages) is still supported but will eventually be phased out.</p><h2 id="turbopack" tabindex="-1"><a class="header-anchor" href="#turbopack"><span>Turbopack</span></a></h2><p>Turbopack is an incremental bundler optimized for JavaScript and TypeScript, written in Rust, and built into Next.js. You can use Turbopack with both the Pages and App Router for <strong>a much faster local development experience</strong>.</p><h2 id="edge-runtime" tabindex="-1"><a class="header-anchor" href="#edge-runtime"><span>Edge Runtime</span></a></h2><p>Edge Runtime in Next.js is a lightweight, optimized JavaScript runtime that runs at the edge, close to the user. It allows faster request processing by reducing latency compared to traditional server-based execution.</p><p>Instead of running on a full Node.js environment, Edge Runtime is based on Web APIs (similar to Cloudflare Workers, Deno, and Vercel Edge Functions). It is designed for low-latency, high-performance server-side execution.</p><p>In the context of Next.js, &quot;Edge&quot; refers to running server-side logic at the edge locations instead of traditional backend servers. This is achieved through Edge Runtimes (e.g., Vercel Edge Functions, Cloudflare Workers), which are optimized for low-latency execution.</p><h2 id="server-components" tabindex="-1"><a class="header-anchor" href="#server-components"><span>Server Components</span></a></h2><p>Server Components cannot use state (useState, useEffect), event listeners, or hooks. To handle interactivity, wrap client-side logic in a Client Component.</p><p>Server Components run only on the server and do not include JavaScript in the final page.</p><p>You can access cookies or headers directly in Server Components.</p><p>When to Use Server Components?</p><ul><li>✅ Fetching data from databases or APIs</li><li>✅ Rendering content-heavy pages without extra JS</li><li>✅ Improving SEO (pre-rendering content)</li><li>✅ Accessing cookies, sessions, or headers</li></ul><p>When to Use Client Components?</p><ul><li>✅ Interactivity (buttons, forms, animations)</li><li>✅ Using hooks (useState, useEffect)</li><li>✅ Handling user input and event listeners</li></ul><h2 id="draft-mode" tabindex="-1"><a class="header-anchor" href="#draft-mode"><span>Draft Mode</span></a></h2><p>Draft Mode allows you to preview draft content from your headless CMS in your Next.js application. This is useful for static pages that are generated at build time as it allows you to switch to dynamic rendering and see the draft changes without having to rebuild your entire site.</p>',75)]))}const d=t(o,[["render",s]]),l=JSON.parse('{"path":"/learn/React/buJ5wQYSNWg0gWzTx0id/","title":"NextJS keypoints","lang":"en-US","frontmatter":{"title":"NextJS keypoints","createTime":"2025/03/15 19:09:05","permalink":"/learn/React/buJ5wQYSNWg0gWzTx0id/","author":"Jack","tags":["React","NextJS"],"description":"description","head":[["meta",{"property":"og:url","content":"https://duduainy.top/learn/React/buJ5wQYSNWg0gWzTx0id/"}],["meta",{"property":"og:site_name","content":"Seasoned Jack"}],["meta",{"property":"og:title","content":"NextJS keypoints"}],["meta",{"property":"og:description","content":"description"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://a.okmd.dev/md/67d677947d303.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-07-01T13:12:01.000Z"}],["meta",{"property":"article:author","content":"Jack"}],["meta",{"property":"article:tag","content":"React"}],["meta",{"property":"article:tag","content":"NextJS"}],["meta",{"property":"article:modified_time","content":"2025-07-01T13:12:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"NextJS keypoints\\",\\"image\\":[\\"https://a.okmd.dev/md/67d677947d303.png\\"],\\"dateModified\\":\\"2025-07-01T13:12:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jack\\"}]}"]]},"headers":[],"readingTime":{"minutes":4.83,"words":1448},"git":{"updatedTime":1751375521000},"filePathRelative":"notes/learn/react/8.NextJS keypoints.md","bulletin":false}');export{d as comp,l as data};
